%YAML 1.2
---
name: Twig
scope: text.twig
version: 2
hidden: true

###############################################################################

variables:
  identifiers: '[a-zA-Z_][a-zA-Z0-9_]*'
  modifiers: '[-~]'

  builtin_filters: |-
    (?x: abs | batch | capitalize | column | convert_encoding | country_name
    | currency_name | currency_symbol | data_uri | date | date_modify | default
    | escape | filter | first | format | format_currency | format_date
    | format_datetime | format_number | format_time | html_to_markdown | inky_to_html
    | inline_css | join | json_encode | keys | language_name | last | length
    | locale_name | lower | map | markdown_to_html | merge | nl2br | number_format
    | raw | reduce | replace | reverse | round | slice | slug | sort | spaceless
    | split | striptags | timezone_name | title | trim | u | upper | url_encode )\b

  builtin_functions: |-
    (?x: attribute | block | constant | country_names | country_timezones
    | currency_names | cycle | date | dump | html_classes | include | language_names
    | locale_names | max | min | parent | random | range | script_names
    | source | template_from_string | timezone_names )

###############################################################################

contexts:

  main:
    - meta_scope: meta.template.twig
    - include: twig

  interpolations:
    # to be included in strings to clear string scope within tags
    - match: (?={[{%#])
      push: interpolation-body

  interpolation-body:
    - clear_scopes: 1
    - meta_include_prototype: false
    - include: twig
    - include: immediately-pop

  twig:
    - include: twig-comment-tags
    - include: twig-verbatim-tags
    - include: twig-statement-tags
    - include: twig-expression-tags

###[ TWIG COMMENT TAGS ]#######################################################

  twig-comment-tags:
    - match: \{\#
      scope: punctuation.definition.comment.begin.twig
      push: twig-comment-tag-body

  twig-comment-tag-body:
    - meta_include_prototype: false
    - meta_scope: meta.embedded.comment.twig comment.block.twig
    - match: \#\}
      scope: punctuation.definition.comment.end.twig
      pop: 1

###[ TWIG VERBATIM BLOCK TAGS ]################################################

  twig-verbatim-tags:
    - match: ({%{{modifiers}}?)(\s*(verbatim)\s*)({{modifiers}}?%})
      scope: meta.embedded.statement.twig
      captures:
        1: punctuation.section.embedded.begin.twig
        2: source.twig.embedded
        3: keyword.control.twig
        4: punctuation.section.embedded.end.twig
      push: twig-verbatim-block-body

  twig-verbatim-block-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.raw.twig
    - match: ({%{{modifiers}}?)(\s*(endverbatim)\s*)({{modifiers}}?%})
      scope: meta.embedded.statement.twig
      captures:
        1: punctuation.section.embedded.begin.twig
        2: source.twig.embedded
        3: keyword.control.twig
        4: punctuation.section.embedded.end.twig
      pop: 1

###[ TWIG STATEMENT TAGS ]#####################################################

  twig-statement-tags:
    - match: \{\%{{modifiers}}?
      scope: punctuation.section.embedded.begin.twig
      push:
        - twig-statement-tag-end
        - twig-statement-tag-begin

  twig-statement-tag-begin:
    - meta_include_prototype: false
    - include: block-statement
    - include: control-statement
    - include: import-statement
    - include: macro-statement
    - include: other-statement
    - include: set-statement
    - include: else-pop

  twig-statement-tag-end:
    - meta_scope: meta.embedded.statement.twig
    - meta_content_scope: source.twig.embedded
    - match: '{{modifiers}}?\%\}'
      scope: punctuation.section.embedded.end.twig
      pop: 1
    - include: expressions

###[ TWIG EXPRESSION TAGS ]####################################################

  twig-expression-tags:
    - match: \{\{{{modifiers}}?
      scope: punctuation.section.embedded.begin.twig
      push: twig-expression-tag-body

  twig-expression-tag-body:
    - meta_scope: meta.embedded.expression.twig
    - meta_content_scope: source.twig.embedded
    - match: '{{modifiers}}?\}\}'
      scope: punctuation.section.embedded.end.twig
      pop: 1
    - include: expressions

  expressions:
    - include: arrays
    - include: dictionaries
    - include: parens
    - include: operators
    - include: constants
    - include: functions
    - include: keywords
    - include: variables
    - include: filters
    - include: strings
    - include: floats
    - include: integers

###[ TWIG IMPORT DECLARATIONS ]################################################

  import-statement:
    - match: from\b
      scope: keyword.control.import.from.twig
      set:
        - import-names
        - import-keyword
        - expect-string
    - match: import\b
      scope: keyword.control.import.twig
      set:
        - import-names
        - expect-string
    - match: include\b
      scope: keyword.control.import.include.twig
      set: include-body
    - match: use\b
      scope: keyword.control.import.use.twig
      set: include-body

  import-keyword:
    - match: import\b
      scope: keyword.control.import.twig
      pop: 1
    - include: else-pop

  expect-string:
    - include: double-quoted-string
    - include: single-quoted-string
    - include: else-pop

  import-names:
    - meta_scope: meta.import.twig
    - match: as\b
      scope: keyword.operator.assignment.as.twig
    - include: comma-delimiters
    - include: variables
    - include: else-pop

  include-body:
    - match: with\b
      scope: keyword.other.twig
    - match: as\b
      scope: keyword.operator.assignment.as.twig
    - include: block-pop
    - include: comma-delimiters
    - include: expressions

###[ TWIG BLOCK DECLARATIONS ]#################################################

  block-statement:
    - match: block\b
      scope: keyword.declaration.block.twig
      set: block-name
    - match: endblock\b
      scope: keyword.declaration.block.end.twig
      pop: 1

  block-name:
    - match: '{{identifiers}}'
      scope: entity.name.block.twig
      pop: 1
    - include: else-pop

###[ TWIG MACRO DECLARATIONS ]#################################################

  macro-statement:
    - match: macro\b
      scope: meta.function.twig keyword.declaration.macro.twig
      set: macro-name
    - match: endmacro\b
      scope: keyword.declaration.macro.end.twig
      pop: 1

  macro-name:
    - meta_content_scope: meta.function.identifier.twig
    - match: '{{identifiers}}'
      scope: entity.name.function.macro.twig
    - match: \(
      scope: punctuation.section.parameters.begin.twig
      set: macro-parameter-list-body
    - include: else-pop

  macro-parameter-list-body:
    - meta_scope: meta.function.parameters.twig
    - match: \)
      scope: punctuation.section.parameters.end.twig
      pop: 1
    - match: ({{identifiers}})\s*([:=])
      captures:
        1: variable.parameter.twig
        2: keyword.operator.assignment.twig
    - include: block-pop
    - include: comma-delimiters
    - include: expressions

###[ TWIG VARIABLE DECLARATIONS ]##############################################

  set-statement:
    - match: set\b
      scope: meta.declaration.twig keyword.declaration.variable.twig
      set:
        - set-statement-assignment
        - set-statement-name
    - match: endset\b
      scope: keyword.declaration.variable.twig
      pop: 1

  set-statement-name:
    - match: '{{identifiers}}'
      scope: variable.other.twig
      pop: 1
    - include: else-pop

  set-statement-assignment:
    - meta_content_scope: meta.declaration.identifier.twig
    - match: '='
      scope: meta.declaration.twig keyword.operator.assignment.twig
      set: set-statement-value
    - include: else-pop

  set-statement-value:
    - meta_content_scope: meta.declaration.value.twig
    - include: block-pop
    - include: expressions

###[ TWIG CONTROL STATEMENTS ]#################################################

  control-statement:
    # conditional statements
    - match: if\b
      scope: keyword.control.conditional.if.twig
      pop: 1
    - match: elseif\b
      scope: keyword.control.conditional.elseif.twig
      pop: 1
    - match: else\b
      scope: keyword.control.conditional.else.twig
      pop: 1
    - match: endif\b
      scope: keyword.control.conditional.endif.twig
      pop: 1
    # for statements
    - match: for\b
      scope: keyword.control.loop.for.twig
      set: for-body
    - match: endfor\b
      scope: keyword.control.loop.for.end.twig
      pop: 1

  for-body:
    - match: in\b
      scope: keyword.operator.iteration.twig
      pop: 1
    - include: comma-delimiters
    - include: variables
    - include: else-pop

###[ TWIG OTHER STATEMENTS ]###################################################

  other-statement:
    # other statements
    - match: apply\b
      scope: keyword.other.twig
      set:
        - filter-meta
        - function-arguments
        - filter-name
    - match: endapply\b
      scope: keyword.other.twig
      pop: 1
    - match: (?:end)?(?:autoescape|cache|deprecated|do|embed|extends|flush|sandbox|with)\b
      scope: keyword.other.twig
      pop: 1

###[ TWIG FILTERS ]############################################################

  filters:
    - match: \|
      scope: keyword.operator.pipe.twig
      push:
        - filter-meta
        - function-arguments
        - filter-name

  filter-name:
    # builtin filters
    - match: '{{builtin_filters}}'
      scope: meta.function-call.identifier.twig support.function.filter.twig
      pop: 1
    # custom filters
    - match: '{{identifiers}}'
      scope: meta.function-call.identifier.twig variable.function.filter.twig
      pop: 1
    - include: else-pop

  filter-meta:
    - meta_include_prototype: false
    - meta_scope: meta.filter.twig
    - include: immediately-pop

###[ TWIG FUNCTION CALLS ]#####################################################

  functions:
    # builtin functions
    - match: '{{builtin_functions}}(?=\()'
      scope: meta.function-call.identifier.twig support.function.twig
      push: function-arguments
    # custom functions
    - match: \w+(?=\()
      scope: meta.function-call.identifier.twig variable.function.twig
      push: function-arguments

  function-arguments:
    - match: \(
      scope: punctuation.section.arguments.begin.twig
      set: function-arguments-body
    - include: else-pop

  function-arguments-body:
    - meta_scope: meta.function-call.arguments.twig
    - match: \)
      scope: punctuation.section.arguments.end.twig
      pop: 1
    - match: ({{identifiers}})\s*([:=])
      captures:
        1: variable.parameter.twig
        2: keyword.operator.assignment.twig
    - include: block-pop
    - include: comma-delimiters
    - include: expressions

###[ TWIG KEYWORDS ]###########################################################

  keywords:
    - match: (?:starts|ends)\s+with\b
      scope: keyword.other.twig
    - match: has\s+(?:every|some)\b
      scope: keyword.other.twig
    - match: matches\b
      scope: keyword.other.twig
    - match: only\b
      scope: keyword.other.twig
    - match: ignore(?=\smissing\b)
      scope: keyword.other.twig
    - match: missing(?!\bignore)\b
      scope: keyword.other.twig
    - match: with(?=\scontext\b)
      scope: keyword.other.twig
    - match: context(?!\bwith)\b
      scope: keyword.other.twig
    - match: without(?=\scontext\b)
      scope: keyword.other.twig

###[ TWIG DATA STRUCTURES ]####################################################

  arrays:
    - match: \[
      scope: punctuation.section.sequence.begin.twig
      push: array-body

  array-body:
    - meta_scope: meta.sequence.array.twig
    - match: \]
      scope: punctuation.section.sequence.end.twig
      pop: 1
    - include: block-pop
    - include: comma-delimiters
    - include: expressions

  dictionaries:
    - match: \{
      scope: punctuation.section.mapping.begin.twig
      push: dictionary-body

  dictionary-body:
    - meta_scope: meta.mapping.twig
    - match: \}
      scope: punctuation.section.mapping.end.twig
      pop: 1
    - match: ','
      scope: punctuation.separator.mapping.pair.twig
    - match: ':'
      scope: punctuation.separator.mapping.key-value.twig
      set: dictionary-value
    - match: (?=\S)
      set: dictionary-key

  dictionary-key:
    - meta_content_scope: meta.mapping.key.twig
    - match: (?=[,:}])
      set: dictionary-body
    - include: block-pop
    - include: expressions

  dictionary-value:
    - meta_content_scope: meta.mapping.value.twig
    - match: (?=[,:}])
      set: dictionary-body
    - include: block-pop
    - include: expressions

  parens:
    - match: (?=\()
      branch_point: parens
      branch:
        - group
        - tuple
        - parameter-list

  group:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.group.begin.twig
      push:
        - fail-parens-on-arrow
        - group-body

  group-body:
    - meta_scope: meta.group.twig
    - match: \)
      scope: punctuation.section.group.end.twig
      pop: 1
    - match: (?=,)
      fail: parens
    - include: block-pop
    - include: expressions

  tuple:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.sequence.begin.twig
      push:
        - fail-parens-on-arrow
        - tuple-body

  tuple-body:
    - meta_scope: meta.sequence.tuple.twig
    - match: \)
      scope: punctuation.section.sequence.end.twig
      pop: 1
    - include: block-pop
    - include: comma-delimiters
    - include: expressions

  fail-parens-on-arrow:
    - meta_include_prototype: false
    - match: (?==>)  # hold up, looks like an arrow function here
      fail: parens
    - match: (?=\S)
      pop: 2

  parameter-list:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.parameters.begin.twig
      set: parameter-list-body

  parameter-list-body:
    - meta_scope: meta.function.parameters.twig
    - match: \)
      scope: punctuation.section.parameters.end.twig
      pop: 1
    - match: '{{identifiers}}'
      scope: variable.parameter.twig
    - include: comma-delimiters
    - include: block-pop

###[ TWIG OPERATORS ]##########################################################

  comma-delimiters:
    - match: \,
      scope: punctuation.separator.sequence.twig

  operators:
    # word-like operators
    - match: in\b
      scope: keyword.operator.iteration.twig
    - match: is\b
      scope: keyword.operator.comparison.test.twig
      push: test-expression
    - match: (?:and|or|not)\b
      scope: keyword.operator.logical.twig
    - match: b-(?:and|or|xor)\b
      scope: keyword.operator.bitwise.twig
    # symbolic operators
    - match: \.{3}
      scope: keyword.operator.spread.twig
    - match: \.{2}
      scope: keyword.operator.range.twig
    - match: \?{2}
      scope: keyword.operator.null-coalescing.twig
    - match: \?
      scope: keyword.operator.ternary.twig
      push: ternary-expression
    - match: \~
      scope: keyword.operator.concatenation.twig
    - match: '[><!=]='
      scope: keyword.operator.comparison.twig
    - match: '[><]'
      scope: keyword.operator.comparison.twig
    - match: '[*/]{2}'
      scope: keyword.operator.arithmetic.twig
    - match: '[-+*/%]'
      scope: keyword.operator.arithmetic.twig
    - match: =>
      scope: keyword.declaration.function.arrow.twig
    - match: =
      scope: keyword.operator.assignment.twig

  ternary-expression:
    - match: ':'
      scope: keyword.operator.ternary.twig
      pop: 1
    - include: block-pop
    - include: expressions

  test-expression:
    # https://twig.symfony.com/doc/3.x/templates.html#test-operator
    - meta_scope: meta.expression.test.twig
    - match: not\b
      scope: keyword.operator.logical.twig
    - match: (?:constant|defined|divisible\sby|empty|even|odd|iterable|odd|same\sas)\b
      scope: meta.function-call.identifier.twig support.function.test.twig
    - match: (?!(?:and|or|xorb-and|b-or|b-xor)\b){{identifiers}}
      scope: meta.function-call.identifier.twig variable.function.test.twig
    - include: function-arguments

###[ TWIG LITERALS ]###########################################################

  constants:
    - match: false\b
      scope: constant.language.boolean.false.twig
    - match: true\b
      scope: constant.language.boolean.true.twig
    - match: (?:none|null)\b
      scope: constant.language.null.twig

  floats:
    - match: (?:\d[\d_]*)?(\.)\d+(?:[eE]\d*)?
      scope: meta.number.float.decimal.twig constant.numeric.value.twig
      captures:
        1: punctuation.separator.decimal.twig

  integers:
    - match: \d[\d_]*
      scope: meta.number.integer.decimal.twig constant.numeric.value.twig

  strings:
    - include: single-quoted-strings
    - include: double-quoted-strings

  single-quoted-strings:
    - match: \'
      scope: punctuation.definition.string.begin.twig
      push: single-quoted-string-body

  single-quoted-string:
    - match: \'
      scope: punctuation.definition.string.begin.twig
      set: single-quoted-string-body

  single-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.twig string.quoted.single.twig
    - match: \'
      scope: punctuation.definition.string.end.twig
      pop: 1
    - include: string-escapes
    - include: string-single-quoted-placeholders

  double-quoted-strings:
    - match: \"
      scope: punctuation.definition.string.begin.twig
      push: double-quoted-string-body

  double-quoted-string:
    - match: \"
      scope: punctuation.definition.string.begin.twig
      set: double-quoted-string-body

  double-quoted-string-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.twig string.quoted.double.twig
    - match: \"
      scope: punctuation.definition.string.end.twig
      pop: 1
    - include: string-escapes
    - include: string-double-quoted-placeholders
    - include: string-interpolations

  string-escapes:
    - match: \\[0-7]{1,3}
      scope: constant.character.escape.octal.twig
    - match: \\x[0-9A-Fa-f]{1,2}
      scope: constant.character.escape.hex.twig
    - match: \\u\{[0-9A-Fa-f]+\}
      scope: constant.character.escape.unicodepoint.twig
    - match: \\[fnrtv\\#"']
      scope: constant.character.escape.twig

  string-double-quoted-placeholders:
    # from PHP Source
    # https://www.php.net/manual/en/function.printf.php
    # https://www.php.net/manual/en/function.strftime
    - match: '%%'
      scope: constant.character.escape.php
    # %[argnum$][flags][width][.precision]specifier
    - match: |-
        (?x)
        (%)                         # punctuation
        (?: \d+\$ )?                # argnum
        [-+]? (?: [ 0] | '. )?      # flags
        \d*                         # width
        (?: (\.) \d* )?             # precision
        [ABCDEFGHIMPRSTUVWXYZabcdefghjklmnoprstuwxyz] # specifier
      scope: constant.other.placeholder.php
      captures:
        1: punctuation.definition.placeholder.php
        2: punctuation.separator.decimal.php

  string-single-quoted-placeholders:
    # from PHP Source
    # https://www.php.net/manual/en/function.printf.php
    # https://www.php.net/manual/en/function.strftime
    - match: '%%'
      scope: constant.character.escape.php
    # %[argnum$][flags][width][.precision]specifier
    - match: |-
        (?x)
        (%)                         # punctuation
        (?: \d+\$ )?                # argnum
        [-+]? (?: [ 0] | \\'. )?    # flags
        \d*                         # width
        (?: (\.) \d* )?             # precision
        [ABCDEFGHIMPRSTUVWXYZabcdefghjklmnoprstuwxyz] # specifier
      scope: constant.other.placeholder.php
      captures:
        1: punctuation.definition.placeholder.php
        2: punctuation.separator.decimal.php

  string-interpolations:
    - match: \#\{
      scope: punctuation.section.interpolation.begin.twig
      push: string-interpolation-body

  string-interpolation-body:
    - clear_scopes: 1
    - meta_scope: meta.interpolation.twig
    - match: \}
      scope: punctuation.section.interpolation.end.twig
      pop: 1
    - include: expressions

###[ TWIG VARIABLES ]##########################################################

  variables:
    - match: _\b
      scope: variable.language.anonymous.twig
      push: variable-members
    - match: (?:_self|_context|_charset)\b
      scope: variable.language.twig
      push: variable-members
    - match: loop\b
      scope: variable.language.twig
      push: loop-members
    - match: '{{identifiers}}(?=\s*=>)'
      scope: variable.parameter.function.twig
    - match: '{{identifiers}}'
      scope: variable.other.twig
      push:
        - variable-members
        - variable-subscription

  loop-members:
    - match: \.
      scope: punctuation.accessor.dot.twig
    - match: (?:index|index0|revindex|revindex0|first|last|length|parent)\b
      scope: variable.language.member.twig
      push: variable-subscription
    - match: '{{identifiers}}'
      scope: variable.other.member.twig
      push: variable-subscription
    - include: immediately-pop

  variable-members:
    - meta_scope: meta.path.twig
    - match: \.
      scope: punctuation.accessor.dot.twig
    - match: '{{identifiers}}(?=\()'
      scope: meta.function-call.identifier.twig variable.function.twig
      push: function-arguments
    - match: '{{identifiers}}'
      scope: variable.other.member.twig
      push: variable-subscription
    - include: immediately-pop

  variable-subscription:
    - match: \[
      scope: punctuation.section.brackets.begin.jinja
      push: subscription-body
    - include: immediately-pop

  subscription-body:
    - meta_scope: meta.brackets.subscription.twig
    - match: \]
      scope: punctuation.section.brackets.end.twig
      pop: 1
    - include: block-pop
    - include: expressions

###[ TWIG PROTOTYPES ]#########################################################

  else-pop:
    - match: (?=\S)
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

  block-pop:
    - match: (?={{modifiers}}?[%}]})
      pop: 1

| SYNTAX TEST "Packages/Twig/Syntaxes/HTML/HTML (Twig).sublime-syntax"

|==============================================================================
| Variables
| https://twig.symfony.com/doc/3.x/templates.html#variables
|==============================================================================

{{ foo.bar }}
|^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|<- punctuation.definition.expression.begin.twig
|          ^^ punctuation.definition.expression.end.twig
|  ^^^ variable.other.twig
|     ^ punctuation.accessor.dot.twig
|      ^^^ meta.property.object.twig

{# https://twig.symfony.com/doc/3.x/templates.html#global-variables #}
{{ _self }}
|  ^^^^^ variable.language.twig
{{ _charset }}
|  ^^^^^^^^ variable.language.twig

{# https://twig.symfony.com/doc/3.x/templates.html#setting-variables #}
{% set foo = 'foo' %}
|^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|<- punctuation.definition.statement.begin.twig
|                  ^^ punctuation.definition.statement.end.twig
|  ^^^ keyword.declaration.twig
|      ^^^ meta.declaration.identifier.twig variable.other.twig
|          ^ keyword.operator.assignment.twig
|            ^^^^^ meta.declaration.value.twig meta.string.twig string.quoted.single.twig

{% set foo = [1, 2] %}
|            ^^^^^^ meta.declaration.value.twig
|            ^^^^^^ meta.sequence.array.twig
|            ^ punctuation.section.sequence.begin.twig
|             ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|              ^ punctuation.separator.sequence.twig
|                ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                 ^ punctuation.section.sequence.end.twig

{# TODO : indicate keys as meta.mapping.key.twig #}
{% set foo = {'foo': 'bar'} %}
|            ^^^^^^^^^^^^^^ meta.mapping.twig
|             ^^^^^ meta.string.twig
|                  ^ punctuation.separator.mapping.key-value.twig

|==============================================================================
| Filters
| https://twig.symfony.com/doc/3.x/templates.html#filters
|==============================================================================

{{ name|striptags|title }}
|  ^^^^ variable.other.twig
|      ^^^^^^^^^^^^^^^^ meta.function.filter.twig
|                      ^ - meta.function.filter.twig
|      ^ keyword.operator.pipe.twig
|       ^^^^^^^^^ support.function.filter.twig
|                ^ keyword.operator.pipe.twig
|                 ^^^^^ support.function.filter.twig

{{ list|join(', ') }}
|  ^^^^ variable.other.twig
|      ^^^^^ meta.function.filter.twig
|           ^^^^^^ meta.group.twig meta.function-call.arguments.twig
|          ^ - meta.group.twig
|          ^ - meta.function-call.arguments.twig
|           ^ punctuation.section.group.begin.twig
|            ^^^^ meta.string.twig string.quoted.single.twig
|                ^ punctuation.section.group.end.twig
|                 ^ - meta.function-call.arguments.twig
|                 ^ - meta.function.filter.twig

{% apply upper %}
|  ^^^^^^^^^^^ meta.statement.apply.twig
|  ^^^^^ keyword.control.twig
|        ^^^^^ support.function.filter.twig
    This text becomes uppercase
{% endapply %}
|  ^^^^^^^^ keyword.control.twig

{# Custom filters #}
{% apply custom %}
|  ^^^^^ keyword.control.twig
|        ^^^^^^ variable.function.filter.twig
{{ foo|bar }}
|     ^^^^ meta.function.filter.twig
|      ^^^ meta.function-call.identifier.twig variable.function.filter.twig

|==============================================================================
| Functions
| https://twig.symfony.com/doc/3.x/templates.html#functions
|==============================================================================

{% for i in range(0, 3) %}
|^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|  ^^^ keyword.control.loop.for.twig
|      ^ variable.other.twig
|           ^^^^^ - meta.function-call.arguments.twig
|           ^^^^^ support.function.twig
|                ^ punctuation.section.group.begin.twig
|                ^^^^^^ meta.group.twig
|                ^^^^^^ meta.function-call.arguments.twig
|                 ^ constant.numeric.value.twig
|                  ^ punctuation.separator.parameters.twig
|                     ^ punctuation.section.group.end.twig

    {{ i }},
{% endfor %}
|  ^^^^^^ keyword.control.loop.for.twig

{# https://twig.symfony.com/doc/3.x/templates.html#named-arguments #}
{% for i in range(low=1, high=10, step=2) %}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|  ^^^ keyword.control.loop.for.twig
|      ^ variable.other.twig
|        ^^ meta.statement.twig keyword.control.loop.for.in.twig
|           ^^^^^ meta.function-call.identifier.twig
|           ^^^^^ - meta.function-call.arguments.twig
|           ^^^^^ support.function.twig
|                ^ punctuation.section.group.begin.twig
|                ^^^^^^^^^^^^^^^^^^^^^^^^ meta.group.twig
|                ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call.arguments.twig
|                                       ^ punctuation.section.group.end.twig
|                      ^ punctuation.separator.parameters.twig
|                               ^ punctuation.separator.parameters.twig
|                 ^^^ variable.parameter.twig
|                    ^ keyword.operator.assignment.twig
|                     ^ constant.numeric.value.twig
    {{ i }},
{% endfor %}

{{ data|convert_encoding('UTF-8', 'iso-2022-jp') }}
|      ^ meta.function.filter.twig keyword.operator.pipe.twig
|       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.filter.twig
|       ^^^^^^^^^^^^^^^^ support.function.filter.twig
|       ^^^^^^^^^^^^^^^^ meta.function-call.identifier.twig
|                       ^^^^^^^^^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                       ^ punctuation.section.group.begin.twig
|                        ^^^^^^^ string.quoted.single.twig
|                               ^ punctuation.separator.parameters.twig
|                                 ^^^^^^^^^^^^^ string.quoted.single.twig
|                                              ^ punctuation.section.group.end.twig

{# versus #}
|^^^^^^^^^^^ comment.block.twig

{{ data|convert_encoding(from='iso-2022-jp', to='UTF-8') }}
|                        ^^^^ variable.parameter.twig
|                            ^ keyword.operator.assignment.twig
|                             ^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
|                                          ^ punctuation.separator.parameters.twig
|                                            ^^ variable.parameter.twig
|                                              ^ keyword.operator.assignment.twig
|                                               ^^^^^^^ meta.string.twig string.quoted.single.twig

{# the first argument is the date format, which defaults to the global date format if null is passed #}
{{ "now"|date(null, "Europe/Paris") }}
|  ^^^^^ meta.string.twig string.quoted.double.twig
|       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.filter.twig
|        ^^^^ meta.function-call.identifier.twig support.function.filter.twig
|             ^^^^ constant.language.null.twig
|                   ^^^^^^^^^^^^^^ meta.string.twig string.quoted.double.twig

{# or skip the format value by using a named argument for the time zone #}
{{ "now"|date(timezone="Europe/Paris") }}
|             ^^^^^^^^ variable.parameter.twig

{{ "now"|date('d/m/Y H:i', timezone="Europe/Paris") }}
|             ^^^^^^^^^^^ meta.function.filter.twig meta.group.twig meta.function-call.arguments.twig meta.string.twig string.quoted.single.twig

{# Custom functions #}
{{ apply_foo(data, 'string') }}
|  ^^^^^^^^^ meta.function-call.identifier.twig variable.function.twig
|           ^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig

|==============================================================================
| Control Structure
| https://twig.symfony.com/doc/3.x/templates.html#control-structure
|==============================================================================

<h1>Members</h1>
<ul>
    {% for user in users %}
|   ^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|   ^^ punctuation.definition.statement.begin.twig
|      ^^^ keyword.control.loop.for.twig
|          ^^^^ variable.other.twig
|               ^^ keyword.control.loop.for.in.twig
|                  ^^^^^ variable.other.twig
|                        ^^ punctuation.definition.statement.end.twig
        <li>{{ user.username|e }}</li>
    {% endfor %}
</ul>

{% if users|length > 0 %}
|^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|  ^^ keyword.control.conditional.if.twig
|     ^^^^^ variable.other.twig
|          ^^^^^^^ meta.function.filter.twig
|          ^ keyword.operator.pipe.twig
|           ^^^^^^ meta.function-call.identifier.twig support.function.filter.twig
|                  ^ keyword.operator.comparison.twig
|                    ^ meta.number.integer.decimal.twig
|                      ^^ punctuation.definition.statement.end.twig
    <ul>
        {% for user in users %}
            <li>{{ user.username|e }}</li>
|               ^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|               ^^ punctuation.definition.expression.begin.twig
|                  ^^^^ variable.other.twig
|                      ^ punctuation.accessor.dot.twig
|                       ^^^^^^^^ meta.property.object.twig
|                               ^^ meta.function.filter.twig
|                               ^ keyword.operator.pipe.twig
|                                ^ meta.function-call.identifier.twig variable.function.filter.twig
|                                  ^^ punctuation.definition.expression.end.twig
        {% endfor %}
    </ul>
{% endif %}

|==============================================================================
| Comments
| https://twig.symfony.com/doc/3.x/templates.html#comments
|==============================================================================

{# note: disabled template because we no longer use this
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.twig
|^ punctuation.definition.comment.begin.twig
    {% for user in users %}
|^^^^^^^^^^^^^^^^^^^^^^^^^^ comment.block.twig
        ...
    {% endfor %}
#}
|^ comment.block.twig punctuation.definition.comment.end.twig

|==============================================================================
| Including other Templates
| https://twig.symfony.com/doc/3.x/templates.html#including-other-templates
|==============================================================================

{{ include('sidebar.html') }}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|  ^^^^^^^ meta.function-call.identifier.twig support.function.twig
|         ^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|         ^ punctuation.section.group.begin.twig
|          ^^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
|          ^ punctuation.definition.string.begin.twig
|                       ^ punctuation.definition.string.end.twig
|                        ^ punctuation.section.group.end.twig
|                          ^^ punctuation.definition.expression.end.twig

{% for box in boxes %}
    {{ include('render_box.html') }}
{% endfor %}

{{ include('sections/articles/sidebar.html') }}

|==============================================================================
| Template Inheritance
| https://twig.symfony.com/doc/3.x/templates.html#template-inheritance
|==============================================================================

<!DOCTYPE html>
<html>
    <head>
        {% block head %}
|       ^^^^^^^^^^^^^^^^ meta.statement.twig
|       ^^ punctuation.definition.statement.begin.twig
|          ^^^^^ keyword.control.twig
|                ^^^^ meta.generic-name.twig
|                     ^^ punctuation.definition.statement.end.twig
            <link rel="stylesheet" href="style.css"/>
            <title>{% block title %}{% endblock %} - My Webpage</title>
        {% endblock %}
    </head>
    <body>
        <div id="content">{% block content %}{% endblock %}</div>
        <div id="footer">
            {% block footer %}
                &copy; Copyright 2011 by <a href="http://domain.invalid/">you</a>.
            {% endblock %}
        </div>
    </body>
</html>

{% extends "base.html" %}
|^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|  ^^^^^^^ keyword.other.twig
|          ^^^^^^^^^^^ meta.string.twig string.quoted.double.twig
|          ^ punctuation.definition.string.begin.twig
|                    ^ punctuation.definition.string.end.twig
|                      ^^ punctuation.definition.statement.end.twig

{% block title %}Index{% endblock %}
|^^^^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|  ^^^^^ keyword.control.twig
|        ^^^^^ meta.generic-name.twig
|              ^^ punctuation.definition.statement.end.twig
|                     ^^ punctuation.definition.statement.begin.twig
|                     ^^^^^^^^^^^^^^ meta.statement.twig
|                        ^^^^^^^^ keyword.control.twig
|                                 ^^ punctuation.definition.statement.end.twig
{% block head %}
    {{ parent() }}
|   ^^^^^^^^^^^^^^ meta.expression.twig
|   ^^ punctuation.definition.expression.begin.twig
|      ^^^^^^ meta.function-call.identifier.twig support.function.twig
|            ^^ meta.group.twig meta.function-call.arguments.twig
|            ^ punctuation.section.group.begin.twig
|             ^ punctuation.section.group.end.twig
|               ^^ punctuation.definition.expression.end.twig
    <style type="text/css">
        .important { color: #336699; }
    </style>
{% endblock %}
{% block content %}
    <h1>Index</h1>
    <p class="important">
        Welcome to my awesome homepage.
    </p>
{% endblock %}

{% block sidebar %}
    <h3>Table Of Contents</h3>
    ...
    {{ parent() }}
{% endblock %}

|==============================================================================
| HTML Escaping
| https://twig.symfony.com/doc/3.x/templates.html#html-escaping
|==============================================================================

{{ user.username|e }}
|^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|               ^^ meta.function.filter.twig
|               ^ keyword.operator.pipe.twig
|                ^ meta.function-call.identifier.twig variable.function.filter.twig

{{ user.username|e('js') }}
|^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|               ^^^^^^^^ meta.function.filter.twig
|               ^ keyword.operator.pipe.twig
|                ^ meta.function-call.identifier.twig variable.function.filter.twig
|                 ^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                 ^ punctuation.section.group.begin.twig
|                  ^^^^ meta.string.twig string.quoted.single.twig
|                      ^ punctuation.section.group.end.twig

{{ user.username|e('css') }}
{{ user.username|e('url') }}
{{ user.username|e('html_attr') }}

{# https://twig.symfony.com/doc/3.x/templates.html#working-with-automatic-escaping #}
{% autoescape %}
|  ^^^^^^^^^^ keyword.other.twig
    Everything will be automatically escaped in this block (using the HTML strategy)
{% endautoescape %}

{% autoescape 'js' %}
|  ^^^^^^^^^^ keyword.other.twig
|             ^^^^ meta.string.twig string.quoted.single.twig
|             ^ punctuation.definition.string.begin.twig
|                ^ punctuation.definition.string.end.twig
    Everything will be automatically escaped in this block (using the JS strategy)
{% endautoescape %}

{# https://twig.symfony.com/doc/3.x/templates.html#escaping #}
{{ '{{' }}
|  ^^^^ meta.string.twig string.quoted.single.twig
|  ^ punctuation.definition.string.begin.twig
|   ^^ constant.character.escape.twig
|     ^ punctuation.definition.string.end.twig

|==============================================================================
| Expressions
| https://twig.symfony.com/doc/3.x/templates.html#expressions
|==============================================================================

{% set greeting = 'Hello ' %}
|                 ^^^^^^^^ meta.string.twig string.quoted.single.twig
|                          ^^ punctuation.definition.statement.end.twig
{% set name = 'Fabien' %}

{{ greeting ~ name|lower }}   {# Hello fabien #}

{# use parenthesis to change precedence #}
{{ (greeting ~ name)|lower }} {# hello fabien #}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|  ^^^^^^^^^^^^^^^^^ meta.group.twig
|  ^ punctuation.section.group.begin.twig
|   ^^^^^^^^ variable.other.twig
|            ^ keyword.operator.concatenation.twig
|              ^^^^ variable.other.twig
|                  ^ punctuation.section.group.end.twig
|                   ^^^^^^ meta.function.filter.twig
|                   ^ keyword.operator.pipe.twig
|                    ^^^^^ meta.function-call.identifier.twig support.function.filter.twig
|                          ^^ punctuation.definition.expression.end.twig
|                             ^^^^^^^^^^^^^^^^^^ comment.block.twig
|                             ^^ punctuation.definition.comment.begin.twig
|                                             ^^ punctuation.definition.comment.end.twig

{# https://twig.symfony.com/doc/3.x/templates.html#literals #}
{% set foo = [1, {"foo": "bar"}] %}
|      ^^^ meta.declaration.identifier.twig variable.other.twig
|          ^ - meta.declaration.value.twig
|            ^^^^^^^^^^^^^^^^^^^ meta.declaration.value.twig
|                                ^ - meta.declaration.value.twig
|          ^ keyword.operator.assignment.twig
|            ^^^^^^^^^^^^^^^^^^^ meta.sequence.array.twig
|            ^ punctuation.section.sequence.begin.twig
|             ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|              ^ punctuation.separator.sequence.twig
|                ^^^^^^^^^^^^^^ meta.mapping.twig
|                ^ punctuation.section.mapping.begin.twig
|                 ^^^^^ meta.string.twig string.quoted.double.twig
|                 ^ punctuation.definition.string.begin.twig
|                     ^ punctuation.definition.string.end.twig
|                      ^ punctuation.separator.mapping.key-value.twig
|                        ^^^^^ meta.string.twig string.quoted.double.twig
|                        ^ punctuation.definition.string.begin.twig
|                            ^ punctuation.definition.string.end.twig
|                             ^ punctuation.section.mapping.end.twig
|                              ^ punctuation.section.sequence.end.twig
|                                ^^ punctuation.definition.statement.end.twig

{# https://twig.symfony.com/doc/3.x/templates.html#math #}
{{ 1 + 1 }}
{{ 3 - 2 }}
{{ 1 / 2 }} is {{ 0.5 }}
|  ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|    ^ keyword.operator.arithmetic.twig
|      ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                 ^^^ meta.number.float.decimal.twig constant.numeric.value.twig
|                  ^ punctuation.separator.decimal.twig
{{ 11 % 7 }} is 4
|  ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
|     ^ keyword.operator.arithmetic.twig
|       ^ meta.number.integer.decimal.twig constant.numeric.value.twig
{{ 20 // 7 }} is 2, {{ -20  // 7 }} is -3
|     ^^ keyword.operator.arithmetic.twig
|        ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                      ^ keyword.operator.arithmetic.twig
|                       ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                           ^^ keyword.operator.arithmetic.twig
|                              ^ meta.number.integer.decimal.twig constant.numeric.value.twig
{{ 2 * 2 }}
{{ 2 ** 3 }}

{# https://twig.symfony.com/doc/3.x/templates.html#logic #}
{{ and }}{{ or }}{{ not }}{{ and not }}
|  ^^^ keyword.operator.word.logical.twig

|==============================================================================
| Comparisons
| https://twig.symfony.com/doc/3.x/templates.html#comparisons
|==============================================================================

{% if 'Fabien' starts with 'F' %}
|     ^^^^^^^^ meta.string.twig string.quoted.single.twig
|              ^^^^^^^^^^^ keyword.other.twig
|                          ^^^ meta.string.twig string.quoted.single.twig
{% endif %}

{% if 'Fabien' ends with 'n' %}
|              ^^^^^^^^^ keyword.other.twig
{% endif %}

{% if phone matches '/^[\\d\\.]+$/' %}
|  ^^ keyword.control.conditional.if.twig
|     ^^^^^ variable.other.twig
|           ^^^^^^^ keyword.other.twig
|                   ^^^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
{% endif %}

{% set sizes = [34, 36, 38, 40, 42] %}

{# https://twig.symfony.com/doc/3.x/templates.html#containment-operator #}
{{ 1 in [1, 2, 3] }}
|  ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|    ^^ keyword.control.in.twig
|       ^^^^^^^^^ meta.sequence.array.twig

{{ 'cd' in 'abcde' }}
|  ^^^^ meta.string.twig string.quoted.single.twig
|       ^^ keyword.control.in.twig
|          ^^^^^^^ meta.string.twig string.quoted.single.twig

{% if 1 not in [1, 2, 3] %}
|     ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|       ^^^ keyword.operator.word.logical.twig
|           ^^ keyword.control.in.twig
|              ^^^^^^^^^ meta.sequence.array.twig

{# is equivalent to #}
{% if not (1 in [1, 2, 3]) %}
|  ^^ keyword.control.conditional.if.twig
|     ^^^ keyword.operator.word.logical.twig
|         ^^^^^^^^^^^^^^^^ meta.group.twig
|            ^^ keyword.control.in.twig
|               ^^^^^^^^^ meta.sequence.array.twig

|==============================================================================
| Arrow functions
| https://twig.symfony.com/doc/3.x/templates.html#comparisons
| https://twig.symfony.com/doc/3.x/filters/reduce.html
|==============================================================================

{# arrow function #}
{% set hasOnlyOver38 = sizes has every v => v > 38 %}
|  ^^^^ keyword.declaration.twig
|      ^^^^^^^^^^^^^ meta.declaration.identifier.twig variable.other.twig
|                    ^ keyword.operator.assignment.twig
|                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.declaration.value.twig
|                      ^^^^^ variable.other.twig
|                            ^^^^^^^^^ keyword.other.twig
|                                      ^ variable.parameter.function.twig
|                                        ^ - keyword.operator.assignment.twig
|                                        ^^ keyword.declaration.function.arrow.twig
|                                           ^ variable.other.twig
|                                             ^ keyword.operator.comparison.twig
|                                               ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
{# hasOnlyOver38 is false #}

{% set hasOver38 = sizes has some v => v > 38 %}
{# hasOver38 is true #}

{# https://twig.symfony.com/doc/3.x/filters/reduce.html #}
{{ numbers|reduce((carry, v, k) => carry + v * k, 10) }}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|  ^^^^^^^ variable.other.twig
|         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.filter.twig
|         ^ keyword.operator.pipe.twig
|          ^^^^^^ meta.function-call.identifier.twig support.function.filter.twig
|                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                ^ punctuation.section.group.begin.twig
|                 ^^^^^^^^^^^^^ meta.function.parameters.twig
|                 ^ punctuation.section.sequence.begin.twig
|                  ^^^^^ variable.parameter.twig
|                       ^ punctuation.separator.sequence.twig
|                         ^ variable.parameter.twig
|                          ^ punctuation.separator.sequence.twig
|                            ^ variable.parameter.twig
|                             ^ punctuation.section.sequence.end.twig
|                               ^^ keyword.declaration.function.arrow.twig
|                                  ^^^^^ variable.other.twig
|                                        ^ keyword.operator.arithmetic.twig
|                                          ^ variable.other.twig
|                                            ^ keyword.operator.arithmetic.twig
|                                              ^ variable.other.twig
|                                               ^ punctuation.separator.parameters.twig
|                                                 ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                                                   ^ punctuation.section.group.end.twig
|                                                     ^^ punctuation.definition.expression.end.twig

|==============================================================================
| Test operator
| https://twig.symfony.com/doc/3.x/templates.html#test-operator
|==============================================================================

{# find out if a variable is odd #}

{{ name is odd }}
|^^^^^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|  ^^^^ variable.other.twig
|       ^^ keyword.operator.comparison.test.twig
|          ^^^ support.function.test.twig
|              ^^ punctuation.definition.expression.end.twig

{{ name is odd and name != '' }}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|^ punctuation.definition.expression.begin.twig
|              ^ - variable.function.test.twig

{% if loop.index is divisible by(3) ? foo : bar %}{% endif %}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|                ^^ keyword.operator.comparison.test.twig
|                   ^^^^^^^^^^^^ support.function.test.twig
|                               ^^^ meta.function-call.arguments.twig
|                                ^  constant.numeric.value.twig
|                                     ^^^ variable.other.twig

{# Custom test #}
{{ name is weird }}
|       ^^ keyword.operator.comparison.test.twig
|          ^^^^^ meta.function.test.twig meta.function-call.identifier.twig variable.function.test.twig

{% if post.status is constant('Post::PUBLISHED') %}
|^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|  ^^ keyword.control.conditional.if.twig
|     ^^^^ variable.other.twig
|         ^ punctuation.accessor.dot.twig
|          ^^^^^^ meta.property.object.twig
|                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.test.twig
|                 ^^ keyword.operator.comparison.test.twig
|                    ^^^^^^^^ support.function.test.twig
|                            ^^^^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                            ^ punctuation.section.group.begin.twig
|                             ^^^^^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
|                                              ^ punctuation.section.group.end.twig
|                                                ^^ punctuation.definition.statement.end.twig

{% if post.status is not constant('Post::PUBLISHED') %}
|                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.test.twig
|                 ^^ keyword.operator.comparison.test.twig
|                    ^^^ keyword.operator.word.logical.twig
|                        ^^^^^^^^ support.function.test.twig
|                                ^^^^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                                ^ punctuation.section.group.begin.twig
|                                 ^^^^^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
|                                                  ^ punctuation.section.group.end.twig
|                                                    ^^ punctuation.definition.statement.end.twig

{# is equivalent to #}
{% if not (post.status is constant('Post::PUBLISHED')) %}
|         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.group.twig
|         ^ punctuation.section.group.begin.twig
|                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function.test.twig
|                      ^^ keyword.operator.comparison.test.twig
|                         ^^^^^^^^ support.function.test.twig
|                                 ^^^^^^^^^^^^^^^^^^^ meta.group.twig meta.function-call.arguments.twig
|                                 ^ punctuation.section.group.begin.twig
|                                  ^^^^^^^^^^^^^^^^^ meta.string.twig string.quoted.single.twig
|                                                   ^ punctuation.section.group.end.twig
|                                                      ^^ punctuation.definition.statement.end.twig

|==============================================================================
| Other Operators
| https://twig.symfony.com/doc/3.x/templates.html#other-operators
|==============================================================================

{% for i in 1..5 %}{{ i }}{% endfor %}
|  ^^^ keyword.control.loop.for.twig
|      ^ variable.other.twig
|        ^^ keyword.control.loop.for.in.twig
|           ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|            ^^ keyword.operator.range.twig
|              ^ meta.number.integer.decimal.twig constant.numeric.value.twig

{{ (1..5)|join(', ') }}
|  ^^^^^^ meta.group.twig
|  ^ punctuation.section.group.begin.twig
|   ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|    ^^ keyword.operator.range.twig
|      ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|       ^ punctuation.section.group.end.twig
|        ^^^^^^^^^^^ meta.function.filter.twig
|        ^ keyword.operator.pipe.twig

{{ "Hello" ~ name ~ "!" }}
|  ^^^^^^^ meta.string.twig string.quoted.double.twig
|          ^ keyword.operator.concatenation.twig
|            ^^^^ variable.other.twig
|                 ^ keyword.operator.concatenation.twig
|                   ^^^ meta.string.twig string.quoted.double.twig

{{ foo ? 'yes' : 'no' }}
|  ^^^ variable.other.twig
|      ^ keyword.operator.ternary.twig
|        ^^^^^ meta.string.twig string.quoted.single.twig
|              ^ keyword.operator.ternary.twig
|                ^^^^ meta.string.twig string.quoted.single.twig

{{ foo ?: 'no' }} is the same as {{ foo ? foo : 'no' }}
{{ foo ? 'yes' }} is the same as {{ foo ? 'yes' : '' }}

{# returns the value of foo if it is defined and not null, 'no' otherwise #}
{{ foo ?? 'no' }}
|  ^^^ variable.other.twig
|      ^^ keyword.operator.null-coalescing.twig
|         ^^^^ meta.string.twig string.quoted.single.twig

{% set numbers = [1, 2, ...moreNumbers] %}
|              ^ keyword.operator.assignment.twig
|                ^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array.twig
|                 ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                  ^ punctuation.separator.sequence.twig
|                    ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                     ^ punctuation.separator.sequence.twig
|                       ^^^ keyword.operator.spread.twig
|                          ^^^^^^^^^^^ variable.other.twig
|                                     ^ punctuation.section.sequence.end.twig

{% set ratings = { 'foo': 10, 'bar': 5, ...moreRatings } %}
|                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.mapping.twig
|                  ^^^^^ meta.string.twig string.quoted.single.twig
|                       ^ punctuation.separator.mapping.key-value.twig
|                         ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                           ^ punctuation.separator.mapping.pair.twig
|                             ^^^^^ meta.string.twig string.quoted.single.twig
|                             ^ punctuation.definition.string.begin.twig
|                                 ^ punctuation.definition.string.end.twig
|                                  ^ punctuation.separator.mapping.key-value.twig
|                                    ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                                     ^ punctuation.separator.mapping.pair.twig
|                                       ^^^ keyword.operator.spread.twig
|                                          ^^^^^^^^^^^ variable.other.twig
|                                                      ^ punctuation.section.mapping.end.twig

|==============================================================================
| String Interpolation
| https://twig.symfony.com/doc/3.x/templates.html#string-interpolation
|==============================================================================

{{ "foo #{bar} baz" }}
{{ "foo #{1 + 2} baz" }}
|  ^^^^^^^^^^^^^^^^^^ meta.string.twig
|  ^^^^^ string.quoted.double.twig
|       ^^^^^^^^ - string
|       ^^^^^^^^ meta.interpolation.twig
|       ^ punctuation.definition.interpolation.twig
|        ^ punctuation.section.interpolation.begin.twig
|         ^^^^^ text.embedded.twig
|         ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|           ^ keyword.operator.arithmetic.twig
|             ^ meta.number.integer.decimal.twig constant.numeric.value.twig
|              ^ punctuation.section.interpolation.end.twig
|               ^^^^^ string.quoted.double.twig
|                   ^ punctuation.definition.string.end.twig

|==============================================================================
| Whitespace Control
| https://twig.symfony.com/doc/3.x/templates.html#whitespace-control
|==============================================================================

{% set value = 'no spaces' %}
{#- No leading/trailing whitespace -#}
{%- if true -%}
|^^^^^^^^^^^^^^ meta.statement.twig
|^^ punctuation.definition.statement.begin.twig
| ^ punctuation.definition.modifier.twig
|           ^^^ punctuation.definition.statement.end.twig
|           ^ punctuation.definition.modifier.twig
    {{- value -}}
|   ^^^^^^^^^^^^^ meta.expression.twig
|   ^^^ punctuation.definition.expression.begin.twig
|     ^ punctuation.definition.modifier.twig
|       ^^^^^ variable.other.twig
|             ^^^ punctuation.definition.expression.end.twig
|             ^ punctuation.definition.modifier.twig
{%- endif -%}
{# output 'no spaces' #}

<li>
    {{ value }}    </li>
{# outputs '<li>\n    no spaces    </li>' #}

<li>
    {{- value }}    </li>
{# outputs '<li>no spaces    </li>' #}

<li>
    {{~ value }}    </li>
|   ^^^^^^^^^^^^ meta.expression.twig
|   ^^^ punctuation.definition.expression.begin.twig
|     ^ punctuation.definition.modifier.twig
|       ^^^^^ variable.other.twig
|             ^^ punctuation.definition.expression.end.twig
{# outputs '<li>\nno spaces    </li>' #}

{% apply spaceless %}
    <div>
        <strong>foo bar</strong>
    </div>
{% endapply %}

|==============================================================================
| Verbatim
| https://twig.symfony.com/doc/3.x/tags/verbatim.html
|==============================================================================

{% verbatim %}
|^^^^^^^^^^^^^ meta.statement.twig
|^ punctuation.definition.statement.begin.twig
|  ^^^^^^^^ keyword.control.twig
|           ^^ punctuation.definition.statement.end.twig
    <ul> bla
|^^^^^^^^^^^ constant.character.twig
    {% for item in seq %}
|^^^^^^^^^^^^^^^^^^^^^^^^ constant.character.twig
        <li>{{ item }}</li>
    {% endfor %}
    </ul>
{% endverbatim %}

|==============================================================================
| For loops
| https://twig.symfony.com/doc/3.x/tags/for.html
|==============================================================================

{# https://twig.symfony.com/doc/3.x/tags/for.html#the-loop-variable #}
{% for user in users %}
    {{ loop.index }} - {{ user.username }}
|      ^^^^ variable.language.twig
|          ^ punctuation.accessor.dot.twig
|           ^^^^^ variable.other.twig
|                         ^^^^ variable.other.twig
|                              ^^^^^^^^ - variable.other.twig
{% endfor %}

{# https://twig.symfony.com/doc/3.x/tags/for.html#iterating-over-keys #}
<ul>
    {% for key in users|keys %}
|      ^^^^^^^^^^^^^^^^^^^^^^ meta.statement.loop.for.twig
|      ^^^ keyword.control.loop.for.twig
|          ^^^ variable.other.twig
|              ^^ keyword.control.loop.for.in.twig
|                 ^^^^^ variable.other.twig
|                      ^^^^^ meta.function.filter.twig
|                      ^ keyword.operator.pipe.twig
|                       ^^^^ meta.function-call.identifier.twig support.function.filter.twig
        <li>{{ key }}</li>
    {% endfor %}
</ul>

{# https://twig.symfony.com/doc/3.x/tags/for.html#iterating-over-keys-and-values #}
{% for key, user in users %}
|  ^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.loop.for.twig
|  ^^^ keyword.control.loop.for.twig
|      ^^^ variable.other.twig
|         ^ punctuation.separator.sequence.twig
|           ^^^^ variable.other.twig
|                ^^ keyword.control.loop.for.in.twig
|                   ^^^^^ variable.other.twig
|                         ^^ punctuation.definition.statement.end.twig
    <li>{{ key }}: {{ user.username|e }}</li>
{% endfor %}

{# https://twig.symfony.com/doc/3.x/tags/for.html#iterating-over-a-subset #}
<ul>
    {% for user in users|slice(0, 10) %}
|      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.loop.for.twig
|      ^^^ keyword.control.loop.for.twig
|          ^^^^ variable.other.twig
|               ^^ keyword.control.loop.for.in.twig
|                  ^^^^^ variable.other.twig
|                       ^^^^^^^^^^^^^ meta.function.filter.twig
|                             ^^^^^^^ meta.group.twig meta.function-call.arguments.twig
        <li>{{ user.username|e }}</li>
    {% endfor %}
</ul>

|==============================================================================
| Extends, Use
| https://twig.symfony.com/doc/3.x/tags/extends.html
| https://twig.symfony.com/doc/3.x/tags/use.html
|==============================================================================

{# https://twig.symfony.com/doc/3.x/tags/extends.html#block-shortcuts #}
{% block title page_title|title %}
|                        ^^^^^^ meta.function.filter.twig

{# https://twig.symfony.com/doc/3.x/tags/extends.html#dynamic-inheritance #}
{% extends ['layout.html', 'base_layout.html'] %}
|          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.sequence.array.twig

{# https://twig.symfony.com/doc/3.x/tags/extends.html#conditional-inheritance #}
{% extends standalone ? "minimum.html" : "base.html" %}
|                     ^ keyword.operator.ternary.twig
|                       ^^^^^^^^^^^^^^ meta.string.twig
|                                      ^ keyword.operator.ternary.twig
|                                        ^^^^^^^^^^^ meta.string.twig

{# https://github.com/Sublime-Instincts/BetterTwig/issues/12 #}
{% extends "/_skeleton.html" %}
|          ^^^^^^^^^^^^^^^^^ meta.string.twig string.quoted.double.twig

{# https://twig.symfony.com/doc/3.x/tags/use.html #}
{% use "blocks.html" with sidebar as base_sidebar, title as base_title %}
|  ^^^ keyword.control.twig
|      ^^^^^^^^^^^^^ meta.string.twig string.quoted.double.twig
|                    ^^^^ keyword.other.twig
|                         ^^^^^^^ variable.other.twig
|                                 ^^ keyword.other.twig
|                                    ^^^^^^^^^^^^ variable.other.twig
|                                                ^ punctuation.separator.sequence.twig
|                                                  ^^^^^ variable.other.twig
|                                                        ^^ keyword.other.twig
|                                                           ^^^^^^^^^^ variable.other.twig

{% use "blocks.html" with sidebar as parent_sidebar %}
|  ^^^ keyword.control.twig
|      ^^^^^^^^^^^^^ meta.string.twig string.quoted.double.twig
|                    ^^^^ keyword.other.twig
|                         ^^^^^^^ variable.other.twig
|                                 ^^ keyword.other.twig
|                                    ^^^^^^^^^^^^^^ variable.other.twig

|==============================================================================
| With
| https://twig.symfony.com/doc/3.x/tags/with.html
|==============================================================================

{% with { foo: 42 } only %}
|^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
|  ^^^^ keyword.other.twig
|       ^^^^^^^^^^^ meta.mapping.twig
|       ^ punctuation.section.mapping.begin.twig
|         ^^^ variable.other.twig
|            ^ punctuation.separator.mapping.key-value.twig
|              ^^ meta.number.integer.decimal.twig constant.numeric.value.twig
|                 ^ punctuation.section.mapping.end.twig
|                   ^^^^ keyword.other.twig
|                        ^^ punctuation.definition.statement.end.twig
    {# only foo is defined #}
    {# bar is not defined #}
{% endwith %}

|==============================================================================
| Inside HTML, CSS, JS
|==============================================================================

<div data-{{ custom_attr }} class="class {{ var|convert_encoding }}"></div>
|         ^^^^^^^^^^^^^^^^^ - entity.other.attribute-name.html
|         ^^^^^^^^^^^^^^^^^ meta.expression.twig
|                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.expression.twig
|                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ - meta.string

<style type="text/css">
    div {
        color: {{ blue|escape }} {# a comment #};
|              ^^^^^^^^^^^^^^^^^ meta.expression.twig
|              ^^^^^^^^^^^^^^^^^ - meta.property-list.css
|              ^^^^^^^^^^^^^^^^^ - meta.property-value.css
|                                ^^^^^^^^^^^^^^^ comment.block.twig
        {% block style %}{% endblock %}
|       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.statement.twig
    }
</style>

<script type="text/javascript">
    var foo = function({{ arg|escape }}) {
|                      ^^^^^^^^^^^^^^^^ meta.expression.twig
|                      ^^^^^^^^^^^^^^^^ - meta.function.parameters.js
        return;
    }

    {# a comment #}
|   ^^^^^^^^^^^^^^^ comment.block.twig

    let obj = {
        foo: "{{ bar }}"
|             ^^^^^^^^^ meta.expression.twig
|             ^^^^^^^^^ - string.quoted.double.js
    }
</script>

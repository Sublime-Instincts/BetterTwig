%YAML 1.2
---
file_extensions:
  - twig
  - htm.twig
  - html.twig
scope: text.html.twig

variables:
  digit: '[0-9]'
  integers: '(?:{{digit}}*_)?{{digit}}+'
  floats: '(?:(?:{{digit}}*_?)*)?(\.){{digit}}+(?:[eE]{{digit}}*)?'
  identifiers: '[a-zA-Z_]+(?:{{digit}}*)?'
  regex_modifiers: '[eimsuxADJSUX]*'

  modifiers: '(?:[-~])'
  logical_operators: \b(?:and|or|not|in|is)\b
  bitwise_operators: \b(?:b-and|b-or|b-xor)\b
  builtin_tags: |-
    (?x:
      \b(?:
          block|recursive|macro|set|extends|include
          |with|autoescape|pluralize|scoped|as
          |verbatim|starts|ends|matches|apply|do
          |flush|use|only|deprecated|embed|sandbox
      )\b
    )
  end_tags: |-
    (?x:
      \b(?:
        endblock|endfor|endmacro|endif|endwith
        |endautoescape|endverbatim|endapply|endembed
        |endsandbox
      )\b
    )

contexts:
  main:
    - match: ""
      push: "Packages/HTML/HTML.sublime-syntax"
      with_prototype:
        - include: statement_blocks
        - include: expression_blocks
        - include: comments

  ###[ Statement Blocks ]##################################################################

  statement_blocks:
    - match: \{\%{{modifiers}}?
      scope: punctuation.definition.statement.begin.twig
      push:
        - meta_scope: meta.statement.twig
        - match: (\s+\-(?!\%))|(\-\s+(?=\%))
          scope: invalid.illegal.twig
        - match: '{{modifiers}}?\%\}'
          scope: punctuation.definition.statement.end.twig
          pop: true
        # - include: import_statements
        - include: get_item
        - include: data_structures
        - include: operators
        - include: logical_and_bitwise
        - include: constants
        - include: others
        - include: functions
        - include: dot_accessor
        - include: match_keywords
        - include: match_identifiers
        - include: common_expressions
        - include: ternary_operator

  ###[ Keywords ]##################################################################

  match_keywords:
    - include: match_keyword_for
    - include: match_keyword_if
    - include: match_keyword_endif
    - include: match_keyword_else
    - include: match_keyword_elseif
    - include: match_keyword_for
    - include: match_keyword_endfor
    - include: match_builtin_tags
    - include: match_builtin_endtags
    - include: match_keyword_continue
    - include: match_keyword_break

  others:
    - match: (\bignore\b)\s{1}(?=\bmissing\b)
      captures:
        1: keyword.other.twig
    - match: (\bmissing\b)(?!\bignore\b\s{1})
      captures:
        1: keyword.other.twig
    - match: (\bwith\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.twig
    - match: (\bcontext\b)(?!\bwith\b\s{1})
      captures:
        1: keyword.other.twig
    - match: (\bwithout\b)\s{1}(?=\bcontext\b)
      captures:
        1: keyword.other.twig

  match_keyword_if:
    - match: \b(if)\b
      scope: keyword.control.conditional.if.twig

  match_keyword_endif:
    - match: \b(endif)\b
      scope: keyword.control.conditional.end.twig

  match_keyword_else:
    - match: \b(else)\b
      scope: keyword.control.conditional.else.twig

  match_keyword_elseif:
    - match: \b(elseif)\b
      scope: keyword.control.conditional.elseif.twig

  match_keyword_for:
    - match: \b(for)\b
      scope: keyword.control.loop.for.twig

  match_keyword_endfor:
    - match: \b(endfor)\b
      scope: keyword.control.loop.end.twig

  match_keyword_continue:
    - match: \b(continue)\b
      scope: keyword.control.flow.continue.twig

  match_keyword_break:
    - match: \b(break)\b
      scope: keyword.control.flow.break.twig

  match_builtin_tags:
    - match: '{{builtin_tags}}'
      scope: keyword.other.tag.twig

  match_builtin_endtags:
    - match: '{{end_tags}}'
      scope: keyword.other.endtag.twig

  ###[ Comments ]##################################################################

  comments:
    - include: multi_line_comments

  multi_line_comments:
    - match: \{\#
      scope: punctuation.definition.comment.begin.twig
      push:
        - meta_scope: comment.block.twig
        - match: \#\}
          scope: punctuation.definition.comment.end.twig
          pop: true

  ###[ Expression Blocks ]##################################################################

  expression_blocks:
    - match: \{{2}{{modifiers}}?
      scope: punctuation.definition.placeholder.begin.twig
      push:
        - meta_scope: meta.placeholder.twig
        - match: '{{modifiers}}?\}{2}'
          scope: punctuation.definition.placeholder.end.twig
          pop: true
        - include: get_item
        - include: data_structures
        - include: match_keyword_if
        - include: match_keyword_else
        - include: logical_and_bitwise
        - include: functions
        - include: constants
        - include: match_identifiers
        - include: common_expressions
        - include: operators
        - include: ternary_operator
        - include: dot_accessor

  import_statements:
    - match: \b(import)\b
      scope: keyword.control.import.twig
      push:
        - meta_scope: meta.statement.import.twig
        - match: (?=\S)
          pop: true
        - include: match_strings
    - match: \b(from)\b
      scope: keyword.control.import.from.twig
      push:
        - meta_scope: meta.statement.import.twig
        - match: (?=\S)
          pop: true
        - include: match_strings

  match_identifiers:
    - match: \b_\b
      scope: variable.language.blank.twig
    - match: '{{identifiers}}'
      scope: variable.other.twig

  ternary_operator:
    - match: '\?'
      scope: keyword.operator.ternary.twig
      push:
        - match_ternary_colon
        - else_pop

  match_ternary_colon:
    - match: '\:'
      scope: keyword.operator.ternary.twig
    - include: else_pop

  dot_accessor:
    - match: \.
      scope: punctuation.accessor.dot.twig

  else_pop:
    - match: (?=\S)
      pop: true

  item_seperator:
    - match: \,
      scope: punctuation.separator.sequence.twig

  functions:
    - match: (\w+)(\()
      captures:
        1: variable.function.twig
        2: punctuation.section.arguments.begin.twig
      push:
        - meta_content_scope: meta.function-call.arguments.twig
        - match: \)
          scope: punctuation.section.arguments.end.twig
          pop: true
        - include: get_item
        - include: data_structures
        - include: constants
        - include: common_expressions
        - include: parameters
        - include: operators
        - include: dot_accessor
        - include: functions
        - match: \,
          scope: punctuation.separator.parameters.twig
        - include: ternary_operator

  parameters:
    - match: '{{identifiers}}'
      scope: variable.parameter.twig

  get_item:
    - match: (\w+)(\[)
      captures:
        1: meta.item-access.twig
        2: meta.item-access.twig punctuation.section.brackets.begin.twig
      push:
        - meta_content_scope: meta.item-access.twig
        - match: \]
          scope: meta.item-access.twig punctuation.section.brackets.end.twig
          pop: true
        - include: match_strings
        - include: integers

  data_structures:
    - include: arrays
    - include: tuples
    - include: dictionaries

  ###[ Arrays ]##################################################################

  arrays:
    - match: \[
      scope: punctuation.section.sequence.begin.twig
      push:
        - meta_scope: meta.sequence.array.twig
        - match: \]
          scope: punctuation.section.sequence.end.twig
          pop: true
        - include: item_seperator
        - include: constants
        - include: common_expressions
        - include: logical_and_bitwise
        - include: data_structures
        - include: operators
        - include: ternary_operator

  ###[ Dictionaries ]##################################################################

  dictionaries:
    - match: \{
      scope: punctuation.section.mapping.begin.twig
      push:
        - meta_scope: meta.mapping.twig
        - match: \}
          scope: punctuation.section.mapping.end.twig
          pop: true
        - include: common_expressions
        - include: data_structures
        - include: logical_and_bitwise
        - include: operators
        - include: constants
        - match: ':'
          scope: punctuation.separator.mapping.key-value.twig
        - match: \,
          scope: punctuation.separator.mapping.twig
        - include: ternary_operator

  ###[ Tuples ]##################################################################

  tuples:
    - match: \(
      scope: punctuation.section.sequence.begin.twig
      push:
        - meta_scope: meta.sequence.tuple.twig
        - match: \)
          scope: punctuation.section.sequence.end.twig
          pop: true
        - include: common_expressions
        - include: item_seperator
        - include: data_structures
        - include: functions
        - include: logical_and_bitwise
        - include: operators
        - include: constants
        - include: ternary_operator

  logical_and_bitwise:
    - include: logical_operators
    - include: bitwise_operators

  logical_operators:
    - match: '{{logical_operators}}'
      scope: keyword.operator.logical.twig

  bitwise_operators:
    - match: '{{bitwise_operators}}'
      scope: keyword.operator.bitwise.twig

  ###[ Common Expressions ]##################################################################

  common_expressions:
    - include: match_strings
    - include: match_numbers

  ###[ Strings ]##################################################################

  match_strings:
    - include: single_string_regex_match
    - include: match_single_string
    - include: double_string_regex_match
    - include: match_double_string

  single_string_regex_match:
    - match: (')(?:/)
      captures:
        1: punctuation.definition.string.begin.twig
      embed: scope:source.regexp
      embed_scope: string.quoted.single.twig
      escape: (?:/{{regex_modifiers}})(')
      escape_captures:
        1: punctuation.definition.string.end.twig

  double_string_regex_match:
    - match: (")(?:/)
      captures:
        1: punctuation.definition.string.begin.twig
      embed: scope:source.regexp
      embed_scope: string.quoted.double.twig
      escape: (?:/{{regex_modifiers}})(")
      escape_captures:
        1: punctuation.definition.string.end.twig

  match_single_string:
    - match: \'
      scope: punctuation.definition.string.begin.twig
      push:
        - meta_scope: string.quoted.single.twig
        - match: \'
          scope: punctuation.definition.string.end.twig
          pop: true
        - include: within_strings

  match_double_string:
    - match: \"
      scope: punctuation.definition.string.begin.twig
      push:
        - meta_scope: string.quoted.double.twig
        - match: \"
          scope: punctuation.definition.string.end.twig
          pop: true
        - include: within_strings
        - include: expression_blocks

  within_strings:
    - include: escape_characters
    - include: printf_placeholder
    - include: other_placeholder

  other_placeholder:
    - match: \#\{
      scope: punctuation.section.interpolation.begin.twig
      push:
        - meta_scope: meta.interpolation.twig
        - match: \}
          scope: punctuation.section.interpolation.end.twig
          pop: true
        - include: match_numbers
        - include: operators
        - include: match_identifiers

  printf_placeholder:
    - match: \%[s]
      scope: constant.other.placeholder.twig

  escape_characters:
    - match: \{[\{\#]
      scope: constant.character.escape.twig

  ###[ Operators ]##################################################################

  operators: [
    {match: '\.{2}', scope: keyword.operator.range.twig},
    {match: '\?{2}', scope: keyword.operator.null-coalescing.twig},
    {match: '\?:'  , scope: keyword.operator.ternary.twig},
    {match: \|     , scope: keyword.operator.logical.pipe.twig},
    {match: \>=    , scope: keyword.operator.comparison.twig},
    {match: \~     , scope: keyword.operator.concatenation.twig},
    {match: \<=    , scope: keyword.operator.comparison.twig},
    {match: \==    , scope: keyword.operator.comparison.twig},
    {match: \=     , scope: keyword.operator.assignment.twig},
    {match: \+     , scope: keyword.operator.arithmetic.twig},
    {match: \-     , scope: keyword.operator.arithmetic.twig},
    {match: \**    , scope: keyword.operator.arithmetic.twig},
    {match: \*     , scope: keyword.operator.arithmetic.twig},
    {match: \/\/   , scope: keyword.operator.arithmetic.twig},
    {match: \/     , scope: keyword.operator.arithmetic.twig},
    {match: \%     , scope: keyword.operator.arithmetic.twig},
    {match: \!=    , scope: keyword.operator.comparison.twig},
    {match: \>     , scope: keyword.operator.comparison.twig},
    {match: \<     , scope: keyword.operator.comparison.twig},
  ]

  ###[ Constants ]##################################################################

  constants:
    - match: \b(true|false|none|null)\b
      scope: constant.language.twig

  ###[ Numbers ]##################################################################

  match_numbers:
    - include: floats
    - include: integers

  integers:
    - match: '{{integers}}'
      scope: meta.number.integer.decimal.twig
      captures:
        0: constant.numeric.value.twig

  floats:
    - match: '{{floats}}'
      scope: meta.number.float.decimal.twig
      captures:
        0: constant.numeric.value.twig
        1: punctuation.separator.decimal.twig
